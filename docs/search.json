[
  {
    "objectID": "nbs/10_gtex/GTEx_PLIER_robustness.html",
    "href": "nbs/10_gtex/GTEx_PLIER_robustness.html",
    "title": "Analysis robustness of PLIER models based on GTEx",
    "section": "",
    "text": "Marc Subirana-Granés (2024)\nCompare the various parameters of PLIER GTEx models across different computations to evaluate PLIER’s robustness, utilizing identical parameters for assessment.\n\n\nCode\nINPUT_PLIER_ROB_DIR=NULL\n\n\n\n\n\n\nCode\nsuppressPackageStartupMessages({\n    \n    library(dplyr)\n    library(tidyr)\n    library(UpSetR)\n    library(ggplot2)\n    library(ComplexHeatmap)\n    library(reshape2)\n    library(corrr)\n    library(assertthat)\n\n    \n})\n\n#load functions\nsource(here::here('scripts/plier_util.R'))\n\n# move functions to a Rscript?\ncheck_all_equal_in_list &lt;- function(lst) {\n  # Check if all values in the list are equal\n  all_equal &lt;- all(sapply(lst, function(x) identical(x, lst[[1]])))\n  \n  # Print message based on the result\n  if (all_equal) {\n    print(\"All values in the list are equal.\")\n  } else {\n    print(\"Values in the list are not all equal.\")\n  }\n  \n}\n\nassert_that(!is.null(INPUT_PLIER_ROB_DIR), msg = \"Input robustness PLIER models path was not specified\")\nINPUT_PLIER_ROB_DIR=here::here(INPUT_PLIER_ROB_DIR)\n\n\nTRUE\n\n\n\n\n\nExtract all the parameters in the PLIER module for each GTEx module and create a list for each parameter and load models into a list object.\n\n\nCode\ngtex_rob_model_paths=list.files(INPUT_PLIER_ROB_DIR,\n                                pattern=\"\\\\.rds\",\n                                full.names=TRUE)\n\nparameters_to_keep &lt;- c(\"L1\", \"L2\", \"L3\", \"B\", \"C\", \"heldOutGen\", \"residual\", \"summary\", \"U\", \"Uauc\", \"Z\", \"Up\", \"withPrior\")\n\n# Initialize a list to store the extracted values for each parameter, considering their data types\nextracted_values &lt;- setNames(lapply(parameters_to_keep, function(x) list()), parameters_to_keep)\n\n# Function to handle different types of data structures\nhandle_data_type &lt;- function(data, param) {\n  # Depending on the specific requirements or handling you need for each type, adjust here\n  return(data[[param]])\n}\n\n# Read each file once and extract all specified parameters, handling them based on their type\nall_models_data &lt;- lapply(gtex_rob_model_paths, function(file_path) {\n  plier_model &lt;- readRDS(file_path)\n  # Extract and handle each needed parameter for this model\n  needed_params &lt;- sapply(parameters_to_keep, function(param) handle_data_type(plier_model, param), simplify = FALSE)\n  names(needed_params) &lt;- parameters_to_keep\n  return(needed_params)\n})\n\n# Organize the extracted data by parameter\nfor(param in parameters_to_keep) {\n  extracted_values[[param]] &lt;- lapply(all_models_data, function(model_data) model_data[[param]])\n}\n\n                                      \ngtex_rob_model_paths=list.files(INPUT_PLIER_ROB_DIR,\n    pattern=\"\\\\.rds\",\n    full.names=TRUE)\n                                    \n# All models into a list\ngtex_rob_models=lapply(gtex_rob_model_paths, readRDS)\n\n\nAre the L1, L2 and L3 parameters identical along the different GTEx models run?\nL1\n\n\nCode\nextracted_values$L1\ncheck_all_equal_in_list(extracted_values$L1)                          \n\n\n\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n\n\n\n[1] \"All values in the list are equal.\"\n\n\nL2\n\n\nCode\nextracted_values$L2\ncheck_all_equal_in_list(extracted_values$L2)                          \n\n\n\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n\n\n\n[1] \"All values in the list are equal.\"\n\n\nL3\n\n\nCode\nextracted_values$L3\ncheck_all_equal_in_list(extracted_values$L3)                          \n\n\n\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n\n\n\n[1] \"All values in the list are equal.\"\n\n\nHow similar are the Z matrices along the different models?\nTo study how similar are the Z matrices we will calcuate:\n\nMASE (mean absolute scaled error) between the two Z gene expression matrices.\nSpearman Correlation between the two Z gene expression matrices.\n\nWe expected a low MASE and a high rho (arround 1) if the models are similar.\nWe also expect a inverse correlation between MASE and Spearman Correlation.\nDo the present the same number of LVs and genes?\n\n\nCode\nmatricesZ &lt;- extracted_values$Z\nlapply(matricesZ, ncol)\n\n\n\n    1042\n    1042\n    1042\n    1042\n    1042\n    1042\n    1042\n    1042\n    1042\n    1042\n\n\n\n\n\nCode\nresults_mase &lt;- data.frame()\n\n# Compute MASE for each combination\nfor (i in 1:(length(matricesZ) - 1)) {\n  for (j in (i + 1):length(matricesZ)) {\n    mase_value &lt;- GetReconstructionMASE(matricesZ[[i]], matricesZ[[j]])\n    comparison_name &lt;- paste(\"MatrixZ\", i, \" vs MatrixZ\", j, sep = \"\")\n    tmp_df=data.frame(comparison=comparison_name, mase=mase_value)\n    results_mase &lt;- rbind(results_mase, data.frame(comparison = comparison_name, mase = mase_value))\n  }\n}\n\n# Convert mase to a numeric vector to ensure proper plotting\nresults_mase$mase &lt;- as.numeric(results_mase$mase)\n\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\nggplot(results_mase, aes(x = mase, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"MASE\", \n       title = \"Density plot of MASE for each Z matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Initialize a data frame to store results\nresults_cor &lt;- data.frame(comparison = character(), correlation = numeric(), stringsAsFactors = FALSE)\n\n# Compute Correlation for each combination\nfor (i in 1:(length(matricesZ) - 1)) {\n  for (j in (i + 1):length(matricesZ)) {\n    recon_cor &lt;- GetReconstructionCorrelation(true.mat = matricesZ[[i]], recon.mat = matricesZ[[j]])\n    comparison_name &lt;- paste(\"MatrixZ\", i, \" vs MatrixZ\", j, sep = \"\")\n    results_cor &lt;- rbind(results_cor, data.frame(comparison = comparison_name, correlation = recon_cor))\n  }\n}\n\n# Convert correlation to a numeric vector to ensure proper plotting\nresults_cor$correlation &lt;- as.numeric(results_cor$correlation)\n\noptions(warn=-1)\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\n\nggplot(results_cor, aes(x = correlation, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"Spearman Correlation\", \n       title = \"Density plot of Spearman Correlation for each Z matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\n\n\nCode\nresults_combined &lt;- cbind(results_mase, results_cor[c('correlation')])\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\n\nggplot(results_combined, aes(x = correlation, y = mase, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"Spearman Correlation\", \n       y = \"MASE\", \n       title = \"Correlation vs. MASE for each Z matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\nHow similar are the B matrices along the different models?\nTo study how similar are the B matrices we will calcuate:\n\nMASE (mean absolute scaled error) between the two B expression matrices.\nSpearman Correlation between the two B expression matrices.\n\nWe expected a low MASE and a high rho (arround 1) if the models are similar.\nWe also expect a inverse correlation between MASE and Spearman Correlation.\n\n\nCode\nmatricesB &lt;- extracted_values$B\n\nresults_mase &lt;- data.frame()\n\n# Compute MASE for each combination\nfor (i in 1:(length(matricesB) - 1)) {\n  for (j in (i + 1):length(matricesB)) {\n    mase_value &lt;- GetReconstructionMASE(matricesB[[i]], matricesB[[j]])\n    comparison_name &lt;- paste(\"MatrixB\", i, \" vs MatrixB\", j, sep = \"\")\n    tmp_df=data.frame(comparison=comparison_name, mase=mase_value)\n    results_mase &lt;- rbind(results_mase, data.frame(comparison = comparison_name, mase = mase_value))\n  }\n}\n\n# Convert mase to a numeric vector to ensure proper plotting\nresults_mase$mase &lt;- as.numeric(results_mase$mase)\n\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\nggplot(results_mase, aes(x = mase, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"MASE\", \n       title = \"Density plot of MASE for each B matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(results_cor, aes(x = correlation, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"Spearman Correlation\", \n       title = \"Density plot of Spearman Correlation for each B matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Initialize a data frame to store results\nresults_cor &lt;- data.frame(comparison = character(), correlation = numeric(), stringsAsFactors = FALSE)\n\n# Compute Correlation for each combination\nfor (i in 1:(length(matricesB) - 1)) {\n  for (j in (i + 1):length(matricesB)) {\n    recon_cor &lt;- GetReconstructionCorrelation(true.mat = matricesB[[i]], recon.mat = matricesB[[j]])\n    comparison_name &lt;- paste(\"MatrixB\", i, \" vs MatrixB\", j, sep = \"\")\n    results_cor &lt;- rbind(results_cor, data.frame(comparison = comparison_name, correlation = recon_cor))\n  }\n}\n\n# Convert correlation to a numeric vector to ensure proper plotting\nresults_cor$correlation &lt;- as.numeric(results_cor$correlation)\n\noptions(warn=-1)\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\nggplot(results_cor, aes(x = correlation, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"Spearman Correlation\", \n       title = \"Density plot of Spearman Correlation for each B matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\n\n\nCode\nresults_combined &lt;- cbind(results_mase, results_cor[c('correlation')])\n\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\n\nggplot(results_combined, aes(x = correlation, y = mase, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"Spearman Correlation\", \n       y = \"MASE\", \n       title = \"Correlation vs. MASE for each B matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\nHow similar is the coverage in pathways and LVs assosiated with them?\n\nPathway: This represents the proportion of “covered” pathways within the analysis. A “covered” pathway refers to a pathway that has been identified.\nLV (Latent Variable): This is about the proportion of LVs that have pathways associated with them. The proportion here indicates how many of these LVs have at least one associated pathway, suggesting a linkage or influence between the LVs and the pathways in question.\nSig. Pathway by LV: This metric calculates the number of pathways “covered” divided by the number of LVs. Essentially, it provides a ratio indicating the average number of pathways associated with each LV. A higher ratio suggests that, on average, each LV is associated with multiple pathways, which could indicate a more complex relationship between the LVs and the pathways, or possibly a higher degree of coverage and significance in the analysis.\n\n\n\nCode\noptions(repr.plot.width = 10, repr.plot.height = 10, repr.plot.res = 100)\n\ngtex_rob_models_coverage=lapply(gtex_rob_models, GetPathwayCoverage)\npathways &lt;- numeric(length(gtex_rob_models_coverage))\nlvs &lt;- numeric(length(gtex_rob_models_coverage))\nsig_pathways_by_lv &lt;- numeric(length(gtex_rob_models_coverage))\n\n# Now we loop over the list and extract the values\nfor (i in seq_along(gtex_rob_models_coverage)) {\n  pathways[i] &lt;- gtex_rob_models_coverage[[i]]$pathway\n  lvs[i] &lt;- gtex_rob_models_coverage[[i]]$lv\n  sig_pathways_by_lv[i] &lt;- gtex_rob_models_coverage[[i]]$sig.pathway.by.lv\n}\n\ngtex_df &lt;- data.frame(\n  Index = seq_along(gtex_rob_models_coverage),\n  Pathway = pathways,\n  LV = lvs,\n  SigPathwayByLV = sig_pathways_by_lv\n)\n\ngtex_melted &lt;- melt(gtex_df, id.vars = 'Index')\n\n\nggplot(gtex_melted, aes(x = variable, y = value)) + \n    geom_boxplot() +\n    labs(title = \"Value Distribution by Group\",\n       x = \"Group\",\n       y = \"Value\") +\n    theme_minimal() +\n    theme(\n    axis.text.x = element_text(size = 20, angle = 90, hjust = 1),  # Rotate x-axis labels by 90 degrees\n    axis.text.y = element_text(size = 25),  # Adjust y-axis text size\n    text = element_text(size = 25)  # Adjust other text sizes (plot title, axis labels, etc.)\n)"
  },
  {
    "objectID": "nbs/10_gtex/GTEx_PLIER_robustness.html#load-libraries-and-data",
    "href": "nbs/10_gtex/GTEx_PLIER_robustness.html#load-libraries-and-data",
    "title": "Analysis robustness of PLIER models based on GTEx",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages({\n    \n    library(dplyr)\n    library(tidyr)\n    library(UpSetR)\n    library(ggplot2)\n    library(ComplexHeatmap)\n    library(reshape2)\n    library(corrr)\n    library(assertthat)\n\n    \n})\n\n#load functions\nsource(here::here('scripts/plier_util.R'))\n\n# move functions to a Rscript?\ncheck_all_equal_in_list &lt;- function(lst) {\n  # Check if all values in the list are equal\n  all_equal &lt;- all(sapply(lst, function(x) identical(x, lst[[1]])))\n  \n  # Print message based on the result\n  if (all_equal) {\n    print(\"All values in the list are equal.\")\n  } else {\n    print(\"Values in the list are not all equal.\")\n  }\n  \n}\n\nassert_that(!is.null(INPUT_PLIER_ROB_DIR), msg = \"Input robustness PLIER models path was not specified\")\nINPUT_PLIER_ROB_DIR=here::here(INPUT_PLIER_ROB_DIR)\n\n\nTRUE"
  },
  {
    "objectID": "nbs/10_gtex/GTEx_PLIER_robustness.html#robustness-analysis",
    "href": "nbs/10_gtex/GTEx_PLIER_robustness.html#robustness-analysis",
    "title": "Analysis robustness of PLIER models based on GTEx",
    "section": "",
    "text": "Extract all the parameters in the PLIER module for each GTEx module and create a list for each parameter and load models into a list object.\n\n\nCode\ngtex_rob_model_paths=list.files(INPUT_PLIER_ROB_DIR,\n                                pattern=\"\\\\.rds\",\n                                full.names=TRUE)\n\nparameters_to_keep &lt;- c(\"L1\", \"L2\", \"L3\", \"B\", \"C\", \"heldOutGen\", \"residual\", \"summary\", \"U\", \"Uauc\", \"Z\", \"Up\", \"withPrior\")\n\n# Initialize a list to store the extracted values for each parameter, considering their data types\nextracted_values &lt;- setNames(lapply(parameters_to_keep, function(x) list()), parameters_to_keep)\n\n# Function to handle different types of data structures\nhandle_data_type &lt;- function(data, param) {\n  # Depending on the specific requirements or handling you need for each type, adjust here\n  return(data[[param]])\n}\n\n# Read each file once and extract all specified parameters, handling them based on their type\nall_models_data &lt;- lapply(gtex_rob_model_paths, function(file_path) {\n  plier_model &lt;- readRDS(file_path)\n  # Extract and handle each needed parameter for this model\n  needed_params &lt;- sapply(parameters_to_keep, function(param) handle_data_type(plier_model, param), simplify = FALSE)\n  names(needed_params) &lt;- parameters_to_keep\n  return(needed_params)\n})\n\n# Organize the extracted data by parameter\nfor(param in parameters_to_keep) {\n  extracted_values[[param]] &lt;- lapply(all_models_data, function(model_data) model_data[[param]])\n}\n\n                                      \ngtex_rob_model_paths=list.files(INPUT_PLIER_ROB_DIR,\n    pattern=\"\\\\.rds\",\n    full.names=TRUE)\n                                    \n# All models into a list\ngtex_rob_models=lapply(gtex_rob_model_paths, readRDS)\n\n\nAre the L1, L2 and L3 parameters identical along the different GTEx models run?\nL1\n\n\nCode\nextracted_values$L1\ncheck_all_equal_in_list(extracted_values$L1)                          \n\n\n\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n    27.7699846221656\n\n\n\n[1] \"All values in the list are equal.\"\n\n\nL2\n\n\nCode\nextracted_values$L2\ncheck_all_equal_in_list(extracted_values$L2)                          \n\n\n\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n    55.5399692443312\n\n\n\n[1] \"All values in the list are equal.\"\n\n\nL3\n\n\nCode\nextracted_values$L3\ncheck_all_equal_in_list(extracted_values$L3)                          \n\n\n\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n    0.00103329763864764\n\n\n\n[1] \"All values in the list are equal.\"\n\n\nHow similar are the Z matrices along the different models?\nTo study how similar are the Z matrices we will calcuate:\n\nMASE (mean absolute scaled error) between the two Z gene expression matrices.\nSpearman Correlation between the two Z gene expression matrices.\n\nWe expected a low MASE and a high rho (arround 1) if the models are similar.\nWe also expect a inverse correlation between MASE and Spearman Correlation.\nDo the present the same number of LVs and genes?\n\n\nCode\nmatricesZ &lt;- extracted_values$Z\nlapply(matricesZ, ncol)\n\n\n\n    1042\n    1042\n    1042\n    1042\n    1042\n    1042\n    1042\n    1042\n    1042\n    1042\n\n\n\n\n\nCode\nresults_mase &lt;- data.frame()\n\n# Compute MASE for each combination\nfor (i in 1:(length(matricesZ) - 1)) {\n  for (j in (i + 1):length(matricesZ)) {\n    mase_value &lt;- GetReconstructionMASE(matricesZ[[i]], matricesZ[[j]])\n    comparison_name &lt;- paste(\"MatrixZ\", i, \" vs MatrixZ\", j, sep = \"\")\n    tmp_df=data.frame(comparison=comparison_name, mase=mase_value)\n    results_mase &lt;- rbind(results_mase, data.frame(comparison = comparison_name, mase = mase_value))\n  }\n}\n\n# Convert mase to a numeric vector to ensure proper plotting\nresults_mase$mase &lt;- as.numeric(results_mase$mase)\n\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\nggplot(results_mase, aes(x = mase, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"MASE\", \n       title = \"Density plot of MASE for each Z matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Initialize a data frame to store results\nresults_cor &lt;- data.frame(comparison = character(), correlation = numeric(), stringsAsFactors = FALSE)\n\n# Compute Correlation for each combination\nfor (i in 1:(length(matricesZ) - 1)) {\n  for (j in (i + 1):length(matricesZ)) {\n    recon_cor &lt;- GetReconstructionCorrelation(true.mat = matricesZ[[i]], recon.mat = matricesZ[[j]])\n    comparison_name &lt;- paste(\"MatrixZ\", i, \" vs MatrixZ\", j, sep = \"\")\n    results_cor &lt;- rbind(results_cor, data.frame(comparison = comparison_name, correlation = recon_cor))\n  }\n}\n\n# Convert correlation to a numeric vector to ensure proper plotting\nresults_cor$correlation &lt;- as.numeric(results_cor$correlation)\n\noptions(warn=-1)\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\n\nggplot(results_cor, aes(x = correlation, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"Spearman Correlation\", \n       title = \"Density plot of Spearman Correlation for each Z matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\n\n\nCode\nresults_combined &lt;- cbind(results_mase, results_cor[c('correlation')])\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\n\nggplot(results_combined, aes(x = correlation, y = mase, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"Spearman Correlation\", \n       y = \"MASE\", \n       title = \"Correlation vs. MASE for each Z matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\nHow similar are the B matrices along the different models?\nTo study how similar are the B matrices we will calcuate:\n\nMASE (mean absolute scaled error) between the two B expression matrices.\nSpearman Correlation between the two B expression matrices.\n\nWe expected a low MASE and a high rho (arround 1) if the models are similar.\nWe also expect a inverse correlation between MASE and Spearman Correlation.\n\n\nCode\nmatricesB &lt;- extracted_values$B\n\nresults_mase &lt;- data.frame()\n\n# Compute MASE for each combination\nfor (i in 1:(length(matricesB) - 1)) {\n  for (j in (i + 1):length(matricesB)) {\n    mase_value &lt;- GetReconstructionMASE(matricesB[[i]], matricesB[[j]])\n    comparison_name &lt;- paste(\"MatrixB\", i, \" vs MatrixB\", j, sep = \"\")\n    tmp_df=data.frame(comparison=comparison_name, mase=mase_value)\n    results_mase &lt;- rbind(results_mase, data.frame(comparison = comparison_name, mase = mase_value))\n  }\n}\n\n# Convert mase to a numeric vector to ensure proper plotting\nresults_mase$mase &lt;- as.numeric(results_mase$mase)\n\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\nggplot(results_mase, aes(x = mase, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"MASE\", \n       title = \"Density plot of MASE for each B matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(results_cor, aes(x = correlation, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"Spearman Correlation\", \n       title = \"Density plot of Spearman Correlation for each B matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Initialize a data frame to store results\nresults_cor &lt;- data.frame(comparison = character(), correlation = numeric(), stringsAsFactors = FALSE)\n\n# Compute Correlation for each combination\nfor (i in 1:(length(matricesB) - 1)) {\n  for (j in (i + 1):length(matricesB)) {\n    recon_cor &lt;- GetReconstructionCorrelation(true.mat = matricesB[[i]], recon.mat = matricesB[[j]])\n    comparison_name &lt;- paste(\"MatrixB\", i, \" vs MatrixB\", j, sep = \"\")\n    results_cor &lt;- rbind(results_cor, data.frame(comparison = comparison_name, correlation = recon_cor))\n  }\n}\n\n# Convert correlation to a numeric vector to ensure proper plotting\nresults_cor$correlation &lt;- as.numeric(results_cor$correlation)\n\noptions(warn=-1)\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\nggplot(results_cor, aes(x = correlation, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"Spearman Correlation\", \n       title = \"Density plot of Spearman Correlation for each B matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\n\n\nCode\nresults_combined &lt;- cbind(results_mase, results_cor[c('correlation')])\n\noptions(repr.plot.width = 10, repr.plot.height = 16, repr.plot.res = 250)\n\n\nggplot(results_combined, aes(x = correlation, y = mase, fill = comparison)) +  \n  geom_density(alpha = 0.4) +\n  theme_bw() +\n  labs(x = \"Spearman Correlation\", \n       y = \"MASE\", \n       title = \"Correlation vs. MASE for each B matrix comparison\") +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.title = element_blank(),\n        legend.position = 'bottom',\n               axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n        panel.spacing.x = unit(1, \"lines\")) +\n  facet_wrap(~ comparison, ncol = 5)\n\n\n\n\n\n\n\n\n\nHow similar is the coverage in pathways and LVs assosiated with them?\n\nPathway: This represents the proportion of “covered” pathways within the analysis. A “covered” pathway refers to a pathway that has been identified.\nLV (Latent Variable): This is about the proportion of LVs that have pathways associated with them. The proportion here indicates how many of these LVs have at least one associated pathway, suggesting a linkage or influence between the LVs and the pathways in question.\nSig. Pathway by LV: This metric calculates the number of pathways “covered” divided by the number of LVs. Essentially, it provides a ratio indicating the average number of pathways associated with each LV. A higher ratio suggests that, on average, each LV is associated with multiple pathways, which could indicate a more complex relationship between the LVs and the pathways, or possibly a higher degree of coverage and significance in the analysis.\n\n\n\nCode\noptions(repr.plot.width = 10, repr.plot.height = 10, repr.plot.res = 100)\n\ngtex_rob_models_coverage=lapply(gtex_rob_models, GetPathwayCoverage)\npathways &lt;- numeric(length(gtex_rob_models_coverage))\nlvs &lt;- numeric(length(gtex_rob_models_coverage))\nsig_pathways_by_lv &lt;- numeric(length(gtex_rob_models_coverage))\n\n# Now we loop over the list and extract the values\nfor (i in seq_along(gtex_rob_models_coverage)) {\n  pathways[i] &lt;- gtex_rob_models_coverage[[i]]$pathway\n  lvs[i] &lt;- gtex_rob_models_coverage[[i]]$lv\n  sig_pathways_by_lv[i] &lt;- gtex_rob_models_coverage[[i]]$sig.pathway.by.lv\n}\n\ngtex_df &lt;- data.frame(\n  Index = seq_along(gtex_rob_models_coverage),\n  Pathway = pathways,\n  LV = lvs,\n  SigPathwayByLV = sig_pathways_by_lv\n)\n\ngtex_melted &lt;- melt(gtex_df, id.vars = 'Index')\n\n\nggplot(gtex_melted, aes(x = variable, y = value)) + \n    geom_boxplot() +\n    labs(title = \"Value Distribution by Group\",\n       x = \"Group\",\n       y = \"Value\") +\n    theme_minimal() +\n    theme(\n    axis.text.x = element_text(size = 20, angle = 90, hjust = 1),  # Rotate x-axis labels by 90 degrees\n    axis.text.y = element_text(size = 25),  # Adjust y-axis text size\n    text = element_text(size = 25)  # Adjust other text sizes (plot title, axis labels, etc.)\n)"
  },
  {
    "objectID": "slides/plier_models_recount3.html#prove-python",
    "href": "slides/plier_models_recount3.html#prove-python",
    "title": "PLIER MODELS BASED ON RECOUNT3",
    "section": "Prove python",
    "text": "Prove python\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PLIER models based on recount3",
    "section": "",
    "text": "Welcome to the PLIER models based on recount3 website, where you can find detailed analyses and results from applying PLIER models to recount3 data.\nPLIER is a matrix factorization approach that decomposes gene expression data into a product of a small number of LVs and their corresponding gene associations or loadings, while constraining the loadings to align with the most relevant automatically selected subset of prior knowledge.\n\n\n\nPLIER overview\n\n\nList of analysis:\n\nGTEx PLIER exploratory analyses\n\nAnalysis robustness of PLIER models based on GTEx"
  },
  {
    "objectID": "slides/robustness_PLIER_GTEx.html",
    "href": "slides/robustness_PLIER_GTEx.html",
    "title": "Analysis of the robustness of PLIER analyisis with GTEx",
    "section": "",
    "text": "In this notebook, we will evaluate the robustness of PLIER modules using GTEx data by conducting the analysis with consistent parameters.\n\n\n\n\nCode\nINPUT_PLIER_ROB_PATH = NULL \n\n\n\n\n\n\n\nCode\nlibrary(PLIER)\nlibrary(ggplot2)\nlibrary(assertthat)\n\nsource(here::here('scripts/plier_util.R'))\nINPUT_PLIER_ROB_PATH=here::here('output/gtex/robustness')\n\n\n\n\nCode\ngtex_rob_model_paths &lt;- list.files(INPUT_PLIER_ROB_PATH, full.names = TRUE, pattern = \"\\\\.rds$\")\n\n\n\n\nCode\ngtex_rob_model_paths\n\n\n\n'/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_1.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_10.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_2.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_3.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_4.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_5.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_6.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_7.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_8.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_9.rds'\n\n\n\n\nCode\n# Assuming gtex_rob_model_paths contains the paths to the .rds files\ngtex_models &lt;- lapply(gtex_rob_model_paths, readRDS)\n\n# Initialize lists to store the results of comparisons\nlv_correlations &lt;- list() # Store LV correlations\ngene_overlap_indices &lt;- list() # Store Jaccard indices for gene overlap\npathway_overlap_indices &lt;- list() # Store Jaccard indices for pathway overlap\n\n# Comparing every model with every other model might be redundant,\n# so let's compare each model to the first one as a reference.\nreference_model &lt;- gtex_models[[1]]\n\nfor (i in 2:length(gtex_models)) {\n  current_model &lt;- gtex_models[[i]]\n  \n  # Compare LVs (B matrices)\n  lv_correlations[[i-1]] &lt;- cor(reference_model$B, current_model$B)\n  \n  # Compare gene associations for the first LV as an example\n  top_genes_ref &lt;- order(reference_model$Z[, 1], decreasing = TRUE)[1:10]\n  top_genes_current &lt;- order(current_model$Z[, 1], decreasing = TRUE)[1:10]\n  gene_overlap_indices[[i-1]] &lt;- jaccard_index(names(top_genes_ref), names(top_genes_current))\n  \n  # Compare pathway associations for the first LV as an example\n  top_pathways_ref &lt;- which(reference_model$U[, 1] != 0)\n  top_pathways_current &lt;- which(current_model$U[, 1] != 0)\n  pathway_overlap_indices[[i-1]] &lt;- jaccard_index(names(top_pathways_ref), names(top_pathways_current))\n}\n\n# Example to calculate average correlation across LVs for the first comparison\naverage_cor_lv1 &lt;- mean(lv_correlations[[1]], na.rm = TRUE)\n\n# Display average LV correlation for the first comparison\nprint(average_cor_lv1)\n\n# Display Jaccard index for gene overlap for the first LV comparison\nprint(gene_overlap_indices[[1]])\n\n# Display Jaccard index for pathway overlap for the first LV comparison\nprint(pathway_overlap_indices[[1]])\n\n\n\n\nCode\ngtex_rob_model_path=gtex_rob_model_paths[1]\ngtex_rob_model=readRDS(gtex_rob_model_path)\n\n\n\nB: latent variable matrix with dimension k-by-samples. You can correlate this matrix with the phenotype of interest\nZ: loading matrix with dimension genes-by-k. You can check which genes are top ranked with respect to each LV by ordering the loading values (decreasing order) in a column-wise manner\nU: coefficient matrix with dimension pathways-by-k. This encodes the combination of pathways for each LV\nC: The exact pathway matrix used in the decomposition which may be different from the input\nwithPrior An index vector which indicates the list of LVs that are associated with pathways\nUp Uauc and Up: are AUC and p.val matrices with the same dimension as U. They are calculated based on cross-validation to test how reliable pathways are associated with LVs. All entries with non-zero AUC are collected to formulate summary\nsummary: This is based on Uauc and Up which records pathway-LV pairs that are supported by cross-validation test. For a given LV, if you find the associated pathways are interesting, you may want to double check the top ranked genes for this LV by looking at Z\n\n\n\nCode\nmatrixU &lt;- gtex_rob_model$U\nmatrixZ &lt;- gtex_rob_model$Z\nmatrixB &lt;- gtex_rob_model$B\nPLIER_summary=gtex_rob_model$summary\ngtex_rob_model$L1\n\n\n\n\nCode\nhead(PLIER_summary)\n\n\n\n\nA data.frame: 6 × 5\n\n\n\npathway\nLV index\nAUC\np-value\nFDR\n\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\nIRIS_Neutrophil-Resting\n1\n0.5955477\n3.089207e-03\n9.624810e-03\n\n\n2\nIRIS_Monocyte-Day0\n2\n0.5655353\n5.209197e-02\n9.886236e-02\n\n\n3\nIRIS_Neutrophil-Resting\n2\n0.6826786\n5.800617e-09\n1.020567e-07\n\n\n4\nDMAP_GRAN2\n2\n0.6939956\n2.765659e-04\n1.216483e-03\n\n\n5\nDMAP_GRAN3\n2\n0.5531333\n1.533024e-01\n2.343012e-01\n\n\n6\nDMAP_MONO1\n2\n0.6008004\n4.519634e-02\n8.818046e-02\n\n\n\n\n\n\n\n\nCode\nhead(matrixZ)\n\n\n\n\nA matrix: 6 × 1042 of type dbl\n\n\nGAS6\n0.20762129\n0.00000000\n0.0000000\n0.00000000\n0.0000000\n0.02653939\n0.00000000\n0.00000000\n0.62387382\n0.18440284\n⋯\n0.0000000\n0.00000000\n0.1552670\n0.00000000\n0.00000000\n0.03676118\n0\n0.03729953\n0.01813663\n0.32003652\n\n\nMMP14\n0.09893808\n0.00000000\n0.0000000\n0.03620340\n0.0000000\n0.00000000\n0.00000000\n0.00000000\n0.57073574\n0.00000000\n⋯\n0.0000000\n0.02603330\n0.0000000\n0.01795993\n0.02515933\n0.00000000\n0\n0.00000000\n0.13488302\n0.32878006\n\n\nMARCKSL1\n0.00000000\n0.00000000\n0.0689154\n0.00000000\n0.0000000\n0.06473675\n0.00000000\n0.00000000\n0.06586991\n0.04277300\n⋯\n0.1104464\n0.00000000\n0.0000000\n0.00000000\n0.00000000\n0.00000000\n0\n0.00000000\n0.00000000\n0.07458389\n\n\nSPARC\n0.00000000\n0.00000000\n0.0000000\n0.08840532\n0.0000000\n0.00000000\n0.00000000\n0.03131448\n0.20514237\n0.45000462\n⋯\n0.0000000\n0.00000000\n0.1168224\n0.00000000\n0.03407571\n0.13301524\n0\n0.01732749\n0.00000000\n0.00000000\n\n\nCTSD\n0.00000000\n0.09038044\n0.3689761\n0.05409820\n0.1073371\n0.00000000\n0.00000000\n0.09150932\n1.38866053\n0.02098779\n⋯\n0.0000000\n0.02845362\n0.2228255\n0.00000000\n0.00000000\n0.00000000\n0\n0.00000000\n0.04607547\n0.54812303\n\n\nEPAS1\n0.01069210\n0.00000000\n0.0000000\n0.00000000\n0.0000000\n0.04134291\n0.03603086\n0.00000000\n0.11679199\n0.11713569\n⋯\n0.0000000\n0.00000000\n0.0000000\n0.00000000\n0.37824176\n0.00000000\n0\n0.00000000\n0.28356290\n0.14947889\n\n\n\n\n\n\n\n\nCode\nhead(gtex_rob_model$Uauc)\n\n\n\n\nA matrix: 6 × 1042 of type dbl\n\n\n\nLV1\nLV2\nLV3\nLV4\nLV5\nLV6\nLV7\nLV8\nLV9\nLV10\n⋯\nLV1033\nLV1034\nLV1035\nLV1036\nLV1037\nLV1038\nLV1039\nLV1040\nLV1041\nLV1042\n\n\n\n\nIRIS_Bcell-Memory_IgG_IgA\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_Bcell-Memory_IgM\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_Bcell-naive\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-N0\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-Th1-restimulated12hour\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-Th1-restimulated48hour\n0\n0\n0\n0.9270726\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\nCode\ndata(majorCellTypes)\ncorOut=cor(t(gtex_rob_model$B[, rownames(majorCellTypes)]), majorCellTypes, method=\"s\")\nrownames(corOut)=strtrim(rownames(corOut),30)\npheatmap(corOut) + theme(text = element_text(size = 3)\n\n\nERROR: Error in parse(text = x, srcfile = src): &lt;text&gt;:5:0: unexpected end of input\n3: rownames(corOut)=strtrim(rownames(corOut),30)\n4: pheatmap(corOut) + theme(text = element_text(size = 3)\n  ^\n\n\n\n\nCode\noptions(repr.plot.width=4, repr.plot.height=3)\nplotU(gtex_rob_model, auc.cutoff = 0.70, fdr.cutoff = 0.05, top = 3)"
  },
  {
    "objectID": "slides/robustness_PLIER_GTEx.html#settings-and-paths",
    "href": "slides/robustness_PLIER_GTEx.html#settings-and-paths",
    "title": "Analysis of the robustness of PLIER analyisis with GTEx",
    "section": "",
    "text": "Code\nINPUT_PLIER_ROB_PATH = NULL"
  },
  {
    "objectID": "slides/robustness_PLIER_GTEx.html#load-libraries-and-data",
    "href": "slides/robustness_PLIER_GTEx.html#load-libraries-and-data",
    "title": "Analysis of the robustness of PLIER analyisis with GTEx",
    "section": "",
    "text": "Code\nlibrary(PLIER)\nlibrary(ggplot2)\nlibrary(assertthat)\n\nsource(here::here('scripts/plier_util.R'))\nINPUT_PLIER_ROB_PATH=here::here('output/gtex/robustness')\n\n\n\n\nCode\ngtex_rob_model_paths &lt;- list.files(INPUT_PLIER_ROB_PATH, full.names = TRUE, pattern = \"\\\\.rds$\")\n\n\n\n\nCode\ngtex_rob_model_paths\n\n\n\n'/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_1.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_10.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_2.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_3.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_4.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_5.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_6.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_7.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_8.rds''/home/msubirana/Documents/pivlab/plier_recount3/output/gtex/robustness/gtex_plier_rob_9.rds'\n\n\n\n\nCode\n# Assuming gtex_rob_model_paths contains the paths to the .rds files\ngtex_models &lt;- lapply(gtex_rob_model_paths, readRDS)\n\n# Initialize lists to store the results of comparisons\nlv_correlations &lt;- list() # Store LV correlations\ngene_overlap_indices &lt;- list() # Store Jaccard indices for gene overlap\npathway_overlap_indices &lt;- list() # Store Jaccard indices for pathway overlap\n\n# Comparing every model with every other model might be redundant,\n# so let's compare each model to the first one as a reference.\nreference_model &lt;- gtex_models[[1]]\n\nfor (i in 2:length(gtex_models)) {\n  current_model &lt;- gtex_models[[i]]\n  \n  # Compare LVs (B matrices)\n  lv_correlations[[i-1]] &lt;- cor(reference_model$B, current_model$B)\n  \n  # Compare gene associations for the first LV as an example\n  top_genes_ref &lt;- order(reference_model$Z[, 1], decreasing = TRUE)[1:10]\n  top_genes_current &lt;- order(current_model$Z[, 1], decreasing = TRUE)[1:10]\n  gene_overlap_indices[[i-1]] &lt;- jaccard_index(names(top_genes_ref), names(top_genes_current))\n  \n  # Compare pathway associations for the first LV as an example\n  top_pathways_ref &lt;- which(reference_model$U[, 1] != 0)\n  top_pathways_current &lt;- which(current_model$U[, 1] != 0)\n  pathway_overlap_indices[[i-1]] &lt;- jaccard_index(names(top_pathways_ref), names(top_pathways_current))\n}\n\n# Example to calculate average correlation across LVs for the first comparison\naverage_cor_lv1 &lt;- mean(lv_correlations[[1]], na.rm = TRUE)\n\n# Display average LV correlation for the first comparison\nprint(average_cor_lv1)\n\n# Display Jaccard index for gene overlap for the first LV comparison\nprint(gene_overlap_indices[[1]])\n\n# Display Jaccard index for pathway overlap for the first LV comparison\nprint(pathway_overlap_indices[[1]])\n\n\n\n\nCode\ngtex_rob_model_path=gtex_rob_model_paths[1]\ngtex_rob_model=readRDS(gtex_rob_model_path)\n\n\n\nB: latent variable matrix with dimension k-by-samples. You can correlate this matrix with the phenotype of interest\nZ: loading matrix with dimension genes-by-k. You can check which genes are top ranked with respect to each LV by ordering the loading values (decreasing order) in a column-wise manner\nU: coefficient matrix with dimension pathways-by-k. This encodes the combination of pathways for each LV\nC: The exact pathway matrix used in the decomposition which may be different from the input\nwithPrior An index vector which indicates the list of LVs that are associated with pathways\nUp Uauc and Up: are AUC and p.val matrices with the same dimension as U. They are calculated based on cross-validation to test how reliable pathways are associated with LVs. All entries with non-zero AUC are collected to formulate summary\nsummary: This is based on Uauc and Up which records pathway-LV pairs that are supported by cross-validation test. For a given LV, if you find the associated pathways are interesting, you may want to double check the top ranked genes for this LV by looking at Z\n\n\n\nCode\nmatrixU &lt;- gtex_rob_model$U\nmatrixZ &lt;- gtex_rob_model$Z\nmatrixB &lt;- gtex_rob_model$B\nPLIER_summary=gtex_rob_model$summary\ngtex_rob_model$L1\n\n\n\n\nCode\nhead(PLIER_summary)\n\n\n\n\nA data.frame: 6 × 5\n\n\n\npathway\nLV index\nAUC\np-value\nFDR\n\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\nIRIS_Neutrophil-Resting\n1\n0.5955477\n3.089207e-03\n9.624810e-03\n\n\n2\nIRIS_Monocyte-Day0\n2\n0.5655353\n5.209197e-02\n9.886236e-02\n\n\n3\nIRIS_Neutrophil-Resting\n2\n0.6826786\n5.800617e-09\n1.020567e-07\n\n\n4\nDMAP_GRAN2\n2\n0.6939956\n2.765659e-04\n1.216483e-03\n\n\n5\nDMAP_GRAN3\n2\n0.5531333\n1.533024e-01\n2.343012e-01\n\n\n6\nDMAP_MONO1\n2\n0.6008004\n4.519634e-02\n8.818046e-02\n\n\n\n\n\n\n\n\nCode\nhead(matrixZ)\n\n\n\n\nA matrix: 6 × 1042 of type dbl\n\n\nGAS6\n0.20762129\n0.00000000\n0.0000000\n0.00000000\n0.0000000\n0.02653939\n0.00000000\n0.00000000\n0.62387382\n0.18440284\n⋯\n0.0000000\n0.00000000\n0.1552670\n0.00000000\n0.00000000\n0.03676118\n0\n0.03729953\n0.01813663\n0.32003652\n\n\nMMP14\n0.09893808\n0.00000000\n0.0000000\n0.03620340\n0.0000000\n0.00000000\n0.00000000\n0.00000000\n0.57073574\n0.00000000\n⋯\n0.0000000\n0.02603330\n0.0000000\n0.01795993\n0.02515933\n0.00000000\n0\n0.00000000\n0.13488302\n0.32878006\n\n\nMARCKSL1\n0.00000000\n0.00000000\n0.0689154\n0.00000000\n0.0000000\n0.06473675\n0.00000000\n0.00000000\n0.06586991\n0.04277300\n⋯\n0.1104464\n0.00000000\n0.0000000\n0.00000000\n0.00000000\n0.00000000\n0\n0.00000000\n0.00000000\n0.07458389\n\n\nSPARC\n0.00000000\n0.00000000\n0.0000000\n0.08840532\n0.0000000\n0.00000000\n0.00000000\n0.03131448\n0.20514237\n0.45000462\n⋯\n0.0000000\n0.00000000\n0.1168224\n0.00000000\n0.03407571\n0.13301524\n0\n0.01732749\n0.00000000\n0.00000000\n\n\nCTSD\n0.00000000\n0.09038044\n0.3689761\n0.05409820\n0.1073371\n0.00000000\n0.00000000\n0.09150932\n1.38866053\n0.02098779\n⋯\n0.0000000\n0.02845362\n0.2228255\n0.00000000\n0.00000000\n0.00000000\n0\n0.00000000\n0.04607547\n0.54812303\n\n\nEPAS1\n0.01069210\n0.00000000\n0.0000000\n0.00000000\n0.0000000\n0.04134291\n0.03603086\n0.00000000\n0.11679199\n0.11713569\n⋯\n0.0000000\n0.00000000\n0.0000000\n0.00000000\n0.37824176\n0.00000000\n0\n0.00000000\n0.28356290\n0.14947889\n\n\n\n\n\n\n\n\nCode\nhead(gtex_rob_model$Uauc)\n\n\n\n\nA matrix: 6 × 1042 of type dbl\n\n\n\nLV1\nLV2\nLV3\nLV4\nLV5\nLV6\nLV7\nLV8\nLV9\nLV10\n⋯\nLV1033\nLV1034\nLV1035\nLV1036\nLV1037\nLV1038\nLV1039\nLV1040\nLV1041\nLV1042\n\n\n\n\nIRIS_Bcell-Memory_IgG_IgA\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_Bcell-Memory_IgM\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_Bcell-naive\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-N0\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-Th1-restimulated12hour\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-Th1-restimulated48hour\n0\n0\n0\n0.9270726\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\nCode\ndata(majorCellTypes)\ncorOut=cor(t(gtex_rob_model$B[, rownames(majorCellTypes)]), majorCellTypes, method=\"s\")\nrownames(corOut)=strtrim(rownames(corOut),30)\npheatmap(corOut) + theme(text = element_text(size = 3)\n\n\nERROR: Error in parse(text = x, srcfile = src): &lt;text&gt;:5:0: unexpected end of input\n3: rownames(corOut)=strtrim(rownames(corOut),30)\n4: pheatmap(corOut) + theme(text = element_text(size = 3)\n  ^\n\n\n\n\nCode\noptions(repr.plot.width=4, repr.plot.height=3)\nplotU(gtex_rob_model, auc.cutoff = 0.70, fdr.cutoff = 0.05, top = 3)"
  },
  {
    "objectID": "nbs/10_gtex/GTEx_PLIER_exploration.html",
    "href": "nbs/10_gtex/GTEx_PLIER_exploration.html",
    "title": "GTEx PLIER exploratory analyses",
    "section": "",
    "text": "Marc Subirana-Granés (2024)\nPathway Level Information ExtractoR (PLIER) (Mao, et al. bioRxiv. 2017.) is a framework that explicitly aligns latent variables (LVs) with prior knowledge in the form of (often curated) gene sets. Comparisons of PLIER to other methods (e.g., sparse PCA) and other evaluations can be found in the PLIER preprint.\nWe’re going to explore the GTEx dataset and the corresponding PLIER model.\n\n\n\n\nCode\nINPUT_PLIER_MODEL_FILE = NULL \n\n\n\n\n\n\n\nCode\nsuppressPackageStartupMessages({\n    \n    library(PLIER)\n    library(ggplot2)\n    library(assertthat)\n    library(dplyr)\n    \n})\nsource(here::here('scripts/plier_util.R'))\n\n\n\n\nCode\nassert_that(!is.null(INPUT_PLIER_MODEL_FILE), msg = \"Input PLIER model was not specified\")\nINPUT_PLIER_MODEL_FILE=here::here(INPUT_PLIER_MODEL_FILE)\n\n\nTRUE\n\n\nGene loadings (Z) or the latent space (B)\n\n\nCode\ngtex_plier_results=readRDS(here::here(INPUT_PLIER_MODEL_FILE))\nnum_lvs &lt;- nrow(gtex_plier_results$B)\nmatrixU &lt;- gtex_plier_results$U\nmatrixZ &lt;- gtex_plier_results$Z\nmatrixB &lt;- gtex_plier_results$B\n\n\n\n\n\nThe Z matrix captures the association strength between each LV and the genes across the dataset. In essence, each column of Z corresponds to an LV, and each row to a gene. The value at a given position (i,j) within Z indicates the contribution or importance of gene i to LV j. High absolute values suggest a strong association between a gene and an LV, indicating that the gene’s expression patterns are significantly represented by that LV.\n\n\nCode\nhead(matrixZ)\ndim(matrixZ)\n\n\n\n\nA matrix: 6 × 1042 of type dbl\n\n\nGAS6\n0.20762129\n0.00000000\n0.0000000\n0.00000000\n0.0000000\n0.02653939\n0.00000000\n0.00000000\n0.62387382\n0.18440284\n⋯\n0.0000000\n0.00000000\n0.1552670\n0.00000000\n0.00000000\n0.03676118\n0\n0.03729953\n0.01813663\n0.32003652\n\n\nMMP14\n0.09893808\n0.00000000\n0.0000000\n0.03620340\n0.0000000\n0.00000000\n0.00000000\n0.00000000\n0.57073574\n0.00000000\n⋯\n0.0000000\n0.02603330\n0.0000000\n0.01795993\n0.02515933\n0.00000000\n0\n0.00000000\n0.13488302\n0.32878006\n\n\nMARCKSL1\n0.00000000\n0.00000000\n0.0689154\n0.00000000\n0.0000000\n0.06473675\n0.00000000\n0.00000000\n0.06586991\n0.04277300\n⋯\n0.1104464\n0.00000000\n0.0000000\n0.00000000\n0.00000000\n0.00000000\n0\n0.00000000\n0.00000000\n0.07458389\n\n\nSPARC\n0.00000000\n0.00000000\n0.0000000\n0.08840532\n0.0000000\n0.00000000\n0.00000000\n0.03131448\n0.20514237\n0.45000462\n⋯\n0.0000000\n0.00000000\n0.1168224\n0.00000000\n0.03407571\n0.13301524\n0\n0.01732749\n0.00000000\n0.00000000\n\n\nCTSD\n0.00000000\n0.09038044\n0.3689761\n0.05409820\n0.1073371\n0.00000000\n0.00000000\n0.09150932\n1.38866053\n0.02098779\n⋯\n0.0000000\n0.02845362\n0.2228255\n0.00000000\n0.00000000\n0.00000000\n0\n0.00000000\n0.04607547\n0.54812303\n\n\nEPAS1\n0.01069210\n0.00000000\n0.0000000\n0.00000000\n0.0000000\n0.04134291\n0.03603086\n0.00000000\n0.11679199\n0.11713569\n⋯\n0.0000000\n0.00000000\n0.0000000\n0.00000000\n0.37824176\n0.00000000\n0\n0.00000000\n0.28356290\n0.14947889\n\n\n\n\n\n\n\n\n\nMatrix B represents the association LVs and the samples in the gene expression dataset.\n\n\nCode\nhead(matrixB)\ndim(matrixB)\n\n\nERROR: Error in eval(expr, envir, enclos): object 'matrixB' not found\n\n\n\n\n\nThe matrix U links LVs, derived from gene expression data, to prior biological knowledge encapsulated in gene sets or pathways. Each element in U quantifies the association between a specific pathway and an LV.\n\n\nCode\nhead(matrixU)\ndim(matrixU)\n\n\n\n\nA matrix: 6 × 1042 of type dbl\n\n\n\nLV1\nLV2\nLV3\nLV4\nLV5\nLV6\nLV7\nLV8\nLV9\nLV10\n⋯\nLV1033\nLV1034\nLV1035\nLV1036\nLV1037\nLV1038\nLV1039\nLV1040\nLV1041\nLV1042\n\n\n\n\nIRIS_Bcell-Memory_IgG_IgA\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_Bcell-Memory_IgM\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_Bcell-naive\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-N0\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-Th1-restimulated12hour\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-Th1-restimulated48hour\n0\n0\n0\n0.1697034\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\n\nIf the prior information coefficient matrix, U, has a low number of positive entries for each LV, biological interpretation should be more straightforward. This is one of the constraints in the PLIER model.\n\n\nFor each latent variable (i.e., not just those significantly associated with prior information), how many of the pathways/genesets have a positive entry?\n\n\nCode\nnum_lvs &lt;- nrow(matrixB)\n\nu_sparsity_all &lt;- CalculateUSparsity(plier.results = gtex_plier_results,\n                                     significant.only = FALSE)\nggplot2::ggplot(as.data.frame(u_sparsity_all),\n                ggplot2::aes(x = u_sparsity_all)) +\n  ggplot2::geom_density(fill = \"blue\", alpha = 0.5) +\n  ggplot2::theme_bw() +\n  ggplot2::labs(x = \"proportion of positive entries in U\") +\n  ggplot2::ggtitle(paste(\"All LVs, n =\", num_lvs))\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.000000 0.000000 0.001592 0.004571 0.006369 0.047771 \n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary(u_sparsity_all)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.000000 0.000000 0.001592 0.004571 0.006369 0.047771 \n\n\n\n\n\nWhat proportion of entries in the U matrix for each LV are significantly associated with that LV?\n\n\nCode\nu_sparsity_sig &lt;- CalculateUSparsity(gtex_plier_results, \n                                     significant.only = TRUE,\n                                     fdr.cutoff = 0.05)\nggplot2::ggplot(as.data.frame(u_sparsity_sig),\n                ggplot2::aes(x = u_sparsity_sig)) +\n  ggplot2::geom_density(fill = \"blue\", alpha = 0.5) +\n  ggplot2::theme_bw() +\n  ggplot2::labs(x = \"proportion of positive entries in U\") +\n  ggplot2::ggtitle(\"Significant pathways only\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary(u_sparsity_sig)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.000000 0.000000 0.000000 0.002051 0.001592 0.046178 \n\n\n\n\n\n\n\n\nCode\ncoverage_results &lt;- GetPathwayCoverage(plier.results = gtex_plier_results)\n\n\nWhat proportion of the pathways input into PLIER are significantly associated (FDR cutoff = 0.05) with LVs?\n\n\nCode\nround(coverage_results$pathway, 3)\n\n\n0.519\n\n\nWhat proportion of the PLIER LVs have a gene set associated with them?\n\n\nCode\nround(coverage_results$lv, 3)\n\n\n0.349\n\n\n\n\n\n\nThe “reconstructed” expression data comes form the producto of PLIER gene expression loadings(matrix Z) and latent variables (matrix B)\n\n\nWe reconstruct gene expression data from the gene loadings and LVs.\n\n\nCode\n# reconstructed GTEx expression data from PLIER model\nrecount_recon &lt;- GetReconstructedExprs(z.matrix = as.matrix(matrixZ),\n                                       b.matrix = as.matrix(matrixB))\n\n\n\n\nCode\n# TODO:input expression data from intermediate file\n\n# Load GTEx data\ngtex_expression_path=here::here('output/gtex/GTEx_v8_gene_median_tpm.rds')\ngtex_expression_data &lt;- readRDS(gtex_expression_path)\n\n# Remove gene ens id column and duplicate genes\ngtex_expression_data &lt;- subset(gtex_expression_data, select = -c(gene_ens_id))\ngtex_expression_data &lt;- gtex_expression_data[!duplicated(gtex_expression_data[\"gene_symbol\"]),]\n\n# Rename rows with gene symbols\nrownames(gtex_expression_data) &lt;- gtex_expression_data[,\"gene_symbol\"]\n\n# Remove gene symbol column\ngtex_expression_data &lt;- subset(gtex_expression_data, select = -c(gene_symbol))\n\n# Remove NA\ngtex_expression_data = na.omit(gtex_expression_data)\n\n# Convert to matrix\ngtex_expression_matrix &lt;- as.matrix(gtex_expression_data)\n\n# Z-score normalization\nrecount_input_exprs &lt;- PLIER::rowNorm(gtex_expression_matrix)\n\n\n\n\n\nThe reconstruction of the error is carried out using MASE (mean absolute scaled error) between the two gene expression matrices (before and after the reconstruction).\n\n\nCode\n# reorder rows and columns equal\nrow_order &lt;- rownames(recount_recon)\ncol_order &lt;- colnames(recount_recon)\nrecount_input_exprs &lt;- recount_input_exprs[row_order, col_order]\n\n# calculate reconstruction error (per sample)\nrecon_error &lt;- GetReconstructionMASE(true.mat = recount_input_exprs, \n                                     recon.mat = recount_recon)\n\n# get number of LVs\nnum_lvs &lt;- nrow(matrixB)\n\n\n\n\nCode\n# density plot\nggplot2::ggplot(as.data.frame(recon_error), ggplot2::aes(x = recon_error)) + \n  ggplot2::geom_density(fill = \"blue\", alpha = 0.4) +\n  ggplot2::theme_bw() +\n  ggplot2::labs(x = \"Sample MASE\",\n                title = \"Input vs. PLIER reconstructed GTEx data\",\n                subtitle = paste(\"All LVs, n =\", num_lvs)) +\n  ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\nIf correlation between the input and the reconstructed data is high, that suggests that reconstruction is “successful.” Given the different constraints in PLIER, we would not expect to perfectly (rho = 1) reconstruct the input data. This particular evaluation will be most useful when we look at applying a trained PLIER model to a test dataset.\n\n\nCode\n# calculate correlation \nrecon_cor &lt;- GetReconstructionCorrelation(true.mat = recount_input_exprs,\n                                          recon.mat = recount_recon)\n# density plot\nggplot2::ggplot(as.data.frame(recon_cor), ggplot2::aes(x = recon_cor)) + \n  ggplot2::geom_density(fill = \"blue\", alpha = 0.4) +\n  ggplot2::theme_bw() +\n  ggplot2::labs(x = \"Sample Spearman Correlation\",\n                title = \"Input vs. PLIER reconstructed GTEx data\",\n                subtitle = paste(\"All LVs, n =\", num_lvs)) +\n  ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\nWe expect that samples that are highly correlated pre- and post-PLIER should have low MASE.\n\n\nCode\nggplot2::ggplot(as.data.frame(cbind(recon_cor, recon_error)), \n                ggplot2::aes(x = recon_cor,\n                             y = recon_error)) +\n  ggplot2::geom_point(alpha = 0.2) +\n  ggplot2::theme_bw() +\n  ggplot2::labs(x = \"Spearman Correlation\",\n                y = \"MASE\",\n                title = paste(\"All LVs, n =\", num_lvs))"
  },
  {
    "objectID": "nbs/10_gtex/GTEx_PLIER_exploration.html#settings-and-paths",
    "href": "nbs/10_gtex/GTEx_PLIER_exploration.html#settings-and-paths",
    "title": "GTEx PLIER exploratory analyses",
    "section": "",
    "text": "Code\nINPUT_PLIER_MODEL_FILE = NULL"
  },
  {
    "objectID": "nbs/10_gtex/GTEx_PLIER_exploration.html#load-libraries-and-data",
    "href": "nbs/10_gtex/GTEx_PLIER_exploration.html#load-libraries-and-data",
    "title": "GTEx PLIER exploratory analyses",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages({\n    \n    library(PLIER)\n    library(ggplot2)\n    library(assertthat)\n    library(dplyr)\n    \n})\nsource(here::here('scripts/plier_util.R'))\n\n\n\n\nCode\nassert_that(!is.null(INPUT_PLIER_MODEL_FILE), msg = \"Input PLIER model was not specified\")\nINPUT_PLIER_MODEL_FILE=here::here(INPUT_PLIER_MODEL_FILE)\n\n\nTRUE\n\n\nGene loadings (Z) or the latent space (B)\n\n\nCode\ngtex_plier_results=readRDS(here::here(INPUT_PLIER_MODEL_FILE))\nnum_lvs &lt;- nrow(gtex_plier_results$B)\nmatrixU &lt;- gtex_plier_results$U\nmatrixZ &lt;- gtex_plier_results$Z\nmatrixB &lt;- gtex_plier_results$B"
  },
  {
    "objectID": "nbs/10_gtex/GTEx_PLIER_exploration.html#matrix-z-loadings-gene-x-lvs",
    "href": "nbs/10_gtex/GTEx_PLIER_exploration.html#matrix-z-loadings-gene-x-lvs",
    "title": "GTEx PLIER exploratory analyses",
    "section": "",
    "text": "The Z matrix captures the association strength between each LV and the genes across the dataset. In essence, each column of Z corresponds to an LV, and each row to a gene. The value at a given position (i,j) within Z indicates the contribution or importance of gene i to LV j. High absolute values suggest a strong association between a gene and an LV, indicating that the gene’s expression patterns are significantly represented by that LV.\n\n\nCode\nhead(matrixZ)\ndim(matrixZ)\n\n\n\n\nA matrix: 6 × 1042 of type dbl\n\n\nGAS6\n0.20762129\n0.00000000\n0.0000000\n0.00000000\n0.0000000\n0.02653939\n0.00000000\n0.00000000\n0.62387382\n0.18440284\n⋯\n0.0000000\n0.00000000\n0.1552670\n0.00000000\n0.00000000\n0.03676118\n0\n0.03729953\n0.01813663\n0.32003652\n\n\nMMP14\n0.09893808\n0.00000000\n0.0000000\n0.03620340\n0.0000000\n0.00000000\n0.00000000\n0.00000000\n0.57073574\n0.00000000\n⋯\n0.0000000\n0.02603330\n0.0000000\n0.01795993\n0.02515933\n0.00000000\n0\n0.00000000\n0.13488302\n0.32878006\n\n\nMARCKSL1\n0.00000000\n0.00000000\n0.0689154\n0.00000000\n0.0000000\n0.06473675\n0.00000000\n0.00000000\n0.06586991\n0.04277300\n⋯\n0.1104464\n0.00000000\n0.0000000\n0.00000000\n0.00000000\n0.00000000\n0\n0.00000000\n0.00000000\n0.07458389\n\n\nSPARC\n0.00000000\n0.00000000\n0.0000000\n0.08840532\n0.0000000\n0.00000000\n0.00000000\n0.03131448\n0.20514237\n0.45000462\n⋯\n0.0000000\n0.00000000\n0.1168224\n0.00000000\n0.03407571\n0.13301524\n0\n0.01732749\n0.00000000\n0.00000000\n\n\nCTSD\n0.00000000\n0.09038044\n0.3689761\n0.05409820\n0.1073371\n0.00000000\n0.00000000\n0.09150932\n1.38866053\n0.02098779\n⋯\n0.0000000\n0.02845362\n0.2228255\n0.00000000\n0.00000000\n0.00000000\n0\n0.00000000\n0.04607547\n0.54812303\n\n\nEPAS1\n0.01069210\n0.00000000\n0.0000000\n0.00000000\n0.0000000\n0.04134291\n0.03603086\n0.00000000\n0.11679199\n0.11713569\n⋯\n0.0000000\n0.00000000\n0.0000000\n0.00000000\n0.37824176\n0.00000000\n0\n0.00000000\n0.28356290\n0.14947889"
  },
  {
    "objectID": "nbs/10_gtex/GTEx_PLIER_exploration.html#matrix-b-loadings-lv-x-samples",
    "href": "nbs/10_gtex/GTEx_PLIER_exploration.html#matrix-b-loadings-lv-x-samples",
    "title": "GTEx PLIER exploratory analyses",
    "section": "",
    "text": "Matrix B represents the association LVs and the samples in the gene expression dataset.\n\n\nCode\nhead(matrixB)\ndim(matrixB)\n\n\nERROR: Error in eval(expr, envir, enclos): object 'matrixB' not found"
  },
  {
    "objectID": "nbs/10_gtex/GTEx_PLIER_exploration.html#matrix-u-loadings-pathway-x-lvs",
    "href": "nbs/10_gtex/GTEx_PLIER_exploration.html#matrix-u-loadings-pathway-x-lvs",
    "title": "GTEx PLIER exploratory analyses",
    "section": "",
    "text": "The matrix U links LVs, derived from gene expression data, to prior biological knowledge encapsulated in gene sets or pathways. Each element in U quantifies the association between a specific pathway and an LV.\n\n\nCode\nhead(matrixU)\ndim(matrixU)\n\n\n\n\nA matrix: 6 × 1042 of type dbl\n\n\n\nLV1\nLV2\nLV3\nLV4\nLV5\nLV6\nLV7\nLV8\nLV9\nLV10\n⋯\nLV1033\nLV1034\nLV1035\nLV1036\nLV1037\nLV1038\nLV1039\nLV1040\nLV1041\nLV1042\n\n\n\n\nIRIS_Bcell-Memory_IgG_IgA\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_Bcell-Memory_IgM\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_Bcell-naive\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-N0\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-Th1-restimulated12hour\n0\n0\n0\n0.0000000\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nIRIS_CD4Tcell-Th1-restimulated48hour\n0\n0\n0\n0.1697034\n0\n0\n0\n0\n0\n0\n⋯\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
  },
  {
    "objectID": "nbs/10_gtex/GTEx_PLIER_exploration.html#summary-of-lv-and-coverage",
    "href": "nbs/10_gtex/GTEx_PLIER_exploration.html#summary-of-lv-and-coverage",
    "title": "GTEx PLIER exploratory analyses",
    "section": "",
    "text": "If the prior information coefficient matrix, U, has a low number of positive entries for each LV, biological interpretation should be more straightforward. This is one of the constraints in the PLIER model.\n\n\nFor each latent variable (i.e., not just those significantly associated with prior information), how many of the pathways/genesets have a positive entry?\n\n\nCode\nnum_lvs &lt;- nrow(matrixB)\n\nu_sparsity_all &lt;- CalculateUSparsity(plier.results = gtex_plier_results,\n                                     significant.only = FALSE)\nggplot2::ggplot(as.data.frame(u_sparsity_all),\n                ggplot2::aes(x = u_sparsity_all)) +\n  ggplot2::geom_density(fill = \"blue\", alpha = 0.5) +\n  ggplot2::theme_bw() +\n  ggplot2::labs(x = \"proportion of positive entries in U\") +\n  ggplot2::ggtitle(paste(\"All LVs, n =\", num_lvs))\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.000000 0.000000 0.001592 0.004571 0.006369 0.047771 \n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary(u_sparsity_all)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.000000 0.000000 0.001592 0.004571 0.006369 0.047771 \n\n\n\n\n\nWhat proportion of entries in the U matrix for each LV are significantly associated with that LV?\n\n\nCode\nu_sparsity_sig &lt;- CalculateUSparsity(gtex_plier_results, \n                                     significant.only = TRUE,\n                                     fdr.cutoff = 0.05)\nggplot2::ggplot(as.data.frame(u_sparsity_sig),\n                ggplot2::aes(x = u_sparsity_sig)) +\n  ggplot2::geom_density(fill = \"blue\", alpha = 0.5) +\n  ggplot2::theme_bw() +\n  ggplot2::labs(x = \"proportion of positive entries in U\") +\n  ggplot2::ggtitle(\"Significant pathways only\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary(u_sparsity_sig)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.000000 0.000000 0.000000 0.002051 0.001592 0.046178 \n\n\n\n\n\n\n\n\nCode\ncoverage_results &lt;- GetPathwayCoverage(plier.results = gtex_plier_results)\n\n\nWhat proportion of the pathways input into PLIER are significantly associated (FDR cutoff = 0.05) with LVs?\n\n\nCode\nround(coverage_results$pathway, 3)\n\n\n0.519\n\n\nWhat proportion of the PLIER LVs have a gene set associated with them?\n\n\nCode\nround(coverage_results$lv, 3)\n\n\n0.349"
  },
  {
    "objectID": "nbs/10_gtex/GTEx_PLIER_exploration.html#reconstruction-of-gene-expression-data",
    "href": "nbs/10_gtex/GTEx_PLIER_exploration.html#reconstruction-of-gene-expression-data",
    "title": "GTEx PLIER exploratory analyses",
    "section": "",
    "text": "The “reconstructed” expression data comes form the producto of PLIER gene expression loadings(matrix Z) and latent variables (matrix B)\n\n\nWe reconstruct gene expression data from the gene loadings and LVs.\n\n\nCode\n# reconstructed GTEx expression data from PLIER model\nrecount_recon &lt;- GetReconstructedExprs(z.matrix = as.matrix(matrixZ),\n                                       b.matrix = as.matrix(matrixB))\n\n\n\n\nCode\n# TODO:input expression data from intermediate file\n\n# Load GTEx data\ngtex_expression_path=here::here('output/gtex/GTEx_v8_gene_median_tpm.rds')\ngtex_expression_data &lt;- readRDS(gtex_expression_path)\n\n# Remove gene ens id column and duplicate genes\ngtex_expression_data &lt;- subset(gtex_expression_data, select = -c(gene_ens_id))\ngtex_expression_data &lt;- gtex_expression_data[!duplicated(gtex_expression_data[\"gene_symbol\"]),]\n\n# Rename rows with gene symbols\nrownames(gtex_expression_data) &lt;- gtex_expression_data[,\"gene_symbol\"]\n\n# Remove gene symbol column\ngtex_expression_data &lt;- subset(gtex_expression_data, select = -c(gene_symbol))\n\n# Remove NA\ngtex_expression_data = na.omit(gtex_expression_data)\n\n# Convert to matrix\ngtex_expression_matrix &lt;- as.matrix(gtex_expression_data)\n\n# Z-score normalization\nrecount_input_exprs &lt;- PLIER::rowNorm(gtex_expression_matrix)\n\n\n\n\n\nThe reconstruction of the error is carried out using MASE (mean absolute scaled error) between the two gene expression matrices (before and after the reconstruction).\n\n\nCode\n# reorder rows and columns equal\nrow_order &lt;- rownames(recount_recon)\ncol_order &lt;- colnames(recount_recon)\nrecount_input_exprs &lt;- recount_input_exprs[row_order, col_order]\n\n# calculate reconstruction error (per sample)\nrecon_error &lt;- GetReconstructionMASE(true.mat = recount_input_exprs, \n                                     recon.mat = recount_recon)\n\n# get number of LVs\nnum_lvs &lt;- nrow(matrixB)\n\n\n\n\nCode\n# density plot\nggplot2::ggplot(as.data.frame(recon_error), ggplot2::aes(x = recon_error)) + \n  ggplot2::geom_density(fill = \"blue\", alpha = 0.4) +\n  ggplot2::theme_bw() +\n  ggplot2::labs(x = \"Sample MASE\",\n                title = \"Input vs. PLIER reconstructed GTEx data\",\n                subtitle = paste(\"All LVs, n =\", num_lvs)) +\n  ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\nIf correlation between the input and the reconstructed data is high, that suggests that reconstruction is “successful.” Given the different constraints in PLIER, we would not expect to perfectly (rho = 1) reconstruct the input data. This particular evaluation will be most useful when we look at applying a trained PLIER model to a test dataset.\n\n\nCode\n# calculate correlation \nrecon_cor &lt;- GetReconstructionCorrelation(true.mat = recount_input_exprs,\n                                          recon.mat = recount_recon)\n# density plot\nggplot2::ggplot(as.data.frame(recon_cor), ggplot2::aes(x = recon_cor)) + \n  ggplot2::geom_density(fill = \"blue\", alpha = 0.4) +\n  ggplot2::theme_bw() +\n  ggplot2::labs(x = \"Sample Spearman Correlation\",\n                title = \"Input vs. PLIER reconstructed GTEx data\",\n                subtitle = paste(\"All LVs, n =\", num_lvs)) +\n  ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\nWe expect that samples that are highly correlated pre- and post-PLIER should have low MASE.\n\n\nCode\nggplot2::ggplot(as.data.frame(cbind(recon_cor, recon_error)), \n                ggplot2::aes(x = recon_cor,\n                             y = recon_error)) +\n  ggplot2::geom_point(alpha = 0.2) +\n  ggplot2::theme_bw() +\n  ggplot2::labs(x = \"Spearman Correlation\",\n                y = \"MASE\",\n                title = paste(\"All LVs, n =\", num_lvs))"
  }
]